/* 
Sudoku is a number-placement puzzle. The objective is to fill a 9 × 9 grid with numbers in such a way that each row, each row, and each of the nine 3 × 3 sub-grids that compose the grid all contain all of the numbers from 1 to 9 one time.

Implement an algorithm that will check whether the given grid of numbers represents a valid Sudoku puzzle according to the layout rules described above. Note that the puzzle represented by grid does not have to be solvable.

Example

For

grid = [['.', '.', '.', '1', '4', '.', '.', '2', '.'],
        ['.', '.', '6', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '1', '.', '.', '.', '.', '.', '.'],
        ['.', '6', '7', '.', '.', '.', '.', '.', '9'],
        ['.', '.', '.', '.', '.', '.', '8', '1', '.'],
        ['.', '3', '.', '.', '.', '.', '.', '.', '6'],
        ['.', '.', '.', '.', '.', '7', '.', '.', '.'],
        ['.', '.', '.', '5', '.', '.', '.', '7', '.']]
the output should be
solution(grid) = true;

grid = [['.', '.', '.', '.', '2', '.', '.', '9', '.'],
        ['.', '.', '.', '.', '6', '.', '.', '.', '.'],
        ['7', '1', '.', '.', '7', '5', '.', '.', '.'],
        ['.', '7', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '8', '3', '.', '.', '.'],
        ['.', '.', '8', '.', '.', '7', '.', '6', '.'],
        ['.', '.', '.', '.', '.', '2', '.', '.', '.'],
        ['.', '1', '.', '2', '.', '.', '.', '.', '.'],
        ['.', '2', '.', '.', '3', '.', '.', '.', '.']]
the output should be
solution(grid) = false.
*/

function solution(grid: string[][]): boolean {
  function findColumns(grid: string[][]) {
    type Column = { [key: string]: number };
    let X: Column = {};
    let Y: Column = {};

    for (let x = 0; x < grid.length; x++) {
      for (let y = 0; y < grid.length; y++) {
        const row = grid[x][y];
        const column = grid[y][x];

        if (!isNaN(+row)) X[row] = (X[row] || 0) + 1;
        if (!isNaN(+column)) Y[column] = (Y[column] || 0) + 1;

        if (X[row] > 1 || Y[column] > 1) return true;
      }

      X = {};
      Y = {};
    }
    return false;
  }

  function findSquares() {
    let X = 0,
      Y = 0,
      loop = 0;
    const squares = [];
    while (loop < grid.length) {
      const square = [];
      for (let i = Y + 0; i < Y + 3; i++) {
        for (let ii = X + 0; ii < X + 3; ii++) {
          square.push(grid[i][ii]);
        }
      }
      Y += 3;
      if (Y >= grid.length) {
        Y = 0;
        X += 3;
      }
      squares.push(square);
      loop++;
    }

    for (let i = 0; i < squares.length; i++) {
      const obj: { [key: string]: number } = {};
      for (let ii = 0; ii < squares[i].length; ii++) {
        const elem = squares[i][ii];
        if (!isNaN(+elem)) obj[elem] = (obj[elem] || 0) + 1;
        if (obj[elem] > 1) return true;
      }
    }
    return false;
  }

  return findColumns(grid) || findSquares() ? false : true;
}

console.log(
  solution([
    [".", ".", ".", "9", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", "3", ".", ".", ".", ".", ".", "1"],
    [".", ".", ".", ".", ".", ".", ".", ".", "."],
    ["1", ".", ".", ".", ".", ".", "3", ".", "."],
    [".", ".", ".", ".", "2", ".", "6", ".", "."],
    [".", "9", ".", ".", ".", ".", ".", "7", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", "."],
    ["8", ".", ".", "9", ".", ".", ".", ".", "."]
  ])
); // false

console.log(
  solution([
    [".", ".", ".", ".", ".", ".", "5", ".", "."],
    [".", "A", ".", ".", "D", ".", ".", "G", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", "."],
    ["9", "3", ".", ".", "2", ".", "4", ".", "."],
    [".", "B", "7", ".", "E", ".", "3", "H", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", "3", "4", ".", ".", ".", "."],
    [".", "C", ".", ".", "F", "3", ".", "I", "."],
    [".", ".", ".", ".", ".", "5", "2", ".", "."]
  ])
); // false

console.log(
  solution([
    [".", ".", "5", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", "8", ".", ".", ".", "3", "."],
    [".", "5", ".", ".", "2", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", "9"],
    [".", ".", ".", ".", ".", ".", "4", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", "7"],
    [".", "1", ".", ".", ".", ".", ".", ".", "."],
    ["2", "4", ".", ".", ".", ".", "9", ".", "."]
  ])
); // false

console.log(
  solution([
    [".", ".", ".", ".", "2", ".", ".", "9", "."],
    [".", "6", ".", ".", "6", ".", ".", ".", "."],
    ["7", "1", ".", ".", "7", "5", ".", ".", "."],
    [".", "7", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", "8", "3", ".", ".", "."],
    [".", ".", "8", ".", ".", "7", ".", "6", "."],
    [".", ".", ".", ".", ".", "2", ".", ".", "."],
    [".", ".", ".", "2", ".", ".", ".", ".", "."],
    [".", "2", ".", ".", "3", ".", ".", ".", "."]
  ])
); //false

console.log(
  solution([
    [".", ".", ".", ".", "2", ".", ".", "9", "."],
    [".", ".", ".", ".", "6", ".", ".", ".", "."],
    ["7", "1", ".", ".", "7", "5", ".", ".", "."],
    [".", "7", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", "8", "3", ".", ".", "."],
    [".", ".", "8", ".", ".", "7", ".", "6", "."],
    [".", ".", ".", ".", ".", "2", ".", ".", "."],
    [".", "1", ".", "2", ".", ".", ".", ".", "."],
    [".", "2", ".", ".", "3", ".", ".", ".", "."]
  ])
); //false

console.log(
  solution([
    ["", ".", ".", "1", "4", ".", ".", "2", "."],
    [".", ".", "6", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", "1", ".", ".", ".", ".", ".", "."],
    [".", "6", "7", ".", ".", ".", ".", ".", "9"],
    [".", ".", ".", ".", ".", ".", "8", "1", "."],
    [".", "3", ".", ".", ".", ".", ".", ".", "6"],
    [".", ".", ".", ".", ".", "7", ".", ".", "."],
    [".", ".", ".", "5", ".", ".", ".", "7", "."]
  ])
); // true
